<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="noltodo">
	<!-- 保管したScreen属性を読み取る -->
	<select id="loadPersistStoreMap" parameterType="java.lang.String" resultType="java.lang.String">
		SELECT
			TRIM(STOREVAL)
		FROM
			STOREMAP
		WHERE
			TRIM(SEQ) = #{value}
	</select>

	<!-- Screen属性を保管する -->
	<insert id="savePersistStoreMap" parameterType="java.util.HashMap">
		INSERT INTO
			STOREMAP
		VALUES (
			  #{SEQ}
			, #{STOREMAP}
		)
	</insert>

	<!-- タスクの検索 -->
	<select id="searchTask" parameterType="lumi.vo.SearchVO" resultType="lumi.vo.SearchVO">
		SELECT
			  task.id	id
			, task.name	name
			, task
			, writedate
			, userid
			, jobid
			, m_job.name jobname
			, limitdate
			, status
			, publish
			, priority
		FROM
			task , m_job
			<if test="tagid != null &amp; tagid != ''">
			, tag , tasktag
			</if>
		<where>
			task.jobid = m_job.id
			<if test="jobid != null &amp; jobid != ''">
				AND jobid = #{jobid}
			</if>
			<if test="id != null &amp; id != 0">
				AND task.id = #{id}
			</if>
			<if test="tagid != null &amp; tagid != ''">
				AND task.id = tasktag.taskid
				AND tag.tagid = tasktag.tagid
				AND tasktag.tagid = #{tagid}
			</if>
			<choose>
				<when test="status == 'all'">
					AND ( task.userid = #{userid} OR task.publish = 1 )
				</when>
				<when test="userid != null">
					AND userid = #{userid}
				</when>
			</choose>
		</where>
		ORDER BY
			<if test="priority != null &amp; priority == 'high'">
			priority DESC ,
			</if>
			writedate DESC
			, task.id DESC
	</select>

	<!-- タスクに紐づいたタグの抽出 -->
	<select id="searchTaskTag" parameterType="lumi.vo.SearchVO" resultType="lumi.vo.TagVO">
		SELECT
			tag.tagid
			, display
		FROM
			task , tag , tasktag
		WHERE
			task.id = tasktag.taskid
		AND
			task.id = #{id}
		AND
			tag.tagid = tasktag.tagid
	</select>

	<!-- タスクに紐づくタグを1つ登録する -->
	<insert id="insertTaskTag" parameterType="lumi.vo.TagVO">
		INSERT INTO
			tasktag
		( taskid , tagid )
		VALUES
		( #{taskid} , #{tagid})
	</insert>

	<!-- タスクに紐づくタグを削除する -->
	<delete id="deleteTaskTag" parameterType="lumi.vo.TagVO">
		DELETE FROM
			tasktag
		WHERE
			taskid = #{taskid}
		AND
			tagid = #{tagid}
	</delete>

	<!-- タスクの登録 -->
	<insert id="insertTask" parameterType="lumi.vo.RegisterVO">
		INSERT INTO
			task (
			  name
			, task
			, writedate
			, userid
			, jobid
			, limitdate
			, status
			, publish
			, priority
		) VALUES (
			  #{name}
			, #{task}
			, now()
			, #{userid}
			, #{jobid}
			, #{limitdate}
			, 'op'
			, #{publish}
			, #{priority}
		)
	</insert>

	<!-- 最新のタスク番号を取得 -->
	<select id="selectMaxId" parameterType="lumi.vo.RegisterVO" resultType="int">
		SELECT
			max(id) as id
		FROM
			task
	</select>

	<!-- タスクの更新 -->
	<update id="updateTask" parameterType="lumi.vo.RegisterVO">
		UPDATE
			task
		SET
			  name = #{name}
			, task = #{task}
			, writedate = now()
			, userid = #{userid}
			, jobid = #{jobid}
			, limitdate = #{limitdate}
			, status = #{status}
			, publish = #{publish}
			, priority = #{priority}
		WHERE
			id = #{id}
		AND
			userid = #{userid}
	</update>

	<!-- タスクの削除 -->
	<delete id="deleteTask" parameterType="lumi.vo.RegisterVO">
		DELETE FROM
			task
		WHERE
			userid = #{userid}
		AND
			id = #{id}
	</delete>

	<!-- ユーザの登録 -->
	<insert id="registerUser" parameterType="lumi.vo.UserRegisterVO">
		INSERT INTO userlist
			(username,password,activate,displayname)
		values
			(#{username},#{password}, #{activate},#{displayName})
	</insert>

	<!-- ユーザー権限の登録 -->
	<insert id="registerUserRole" parameterType="lumi.vo.UserRegisterVO">
		INSERT INTO userrole
			(USERNAME,AUTHORITY)
		values
			(#{username},#{userrole});
	</insert>

	<!-- ユーザの更新 -->
	<update id="updateUser" parameterType="lumi.vo.UserVO">
		UPDATE
			userlist
		SET
			PASSWORD = #{password}
		WHERE
			USERNAME = #{username}
	</update>

	<!-- すでに登録済みのユーザ名であるかを件数で取得する -->
	<select id="existUser" parameterType="java.lang.String" resultType="java.lang.Integer">
		SELECT
			COUNT(username)
		FROM
			userlist
		WHERE
			username = #{value}
	</select>

	<!-- パスワードの更新 -->
	<update id="updatePassword" parameterType="lumi.vo.AccountVO">
		UPDATE
			userlist
		SET
			password = #{password}
		WHERE
			username = #{username}
		AND
			password = #{oldPassword}
	</update>

	<!-- ユーザの検索 -->
	<select id="selectUser" parameterType="java.lang.String" resultType="lumi.vo.AccountSearchVO">
		SELECT
			username
			, displayname displayName
			, activate
		FROM
			userlist
		WHERE
			username = #{value}
	</select>

	<!-- タスクに登録されているタグ一覧 -->
	<select id="getTagInTask" parameterType="lumi.vo.TagVO" resultType="lumi.vo.TagVO">
		SELECT
			tag.tagid tagid
			, tag.display display
		FROM
			tag , tasktag
		<where>
			tag.tagid = tasktag.tagid
			<if test="taskid != null &amp; taskid != ''">
			AND
				tasktag.taskid = #{taskid}
			</if>
		</where>
	</select>

	<!-- タグを新規登録する -->
	<insert id="registerTag" parameterType="lumi.vo.TagVO">
		INSERT INTO
			tag
		( tagid , display )
		VALUES
		( #{tagid} , #{display})
	</insert>

	<!-- 存在するタグであるかを検索する -->
	<select id="existTag" parameterType="lumi.vo.TagVO" resultType="string">
		SELECT
			tagid
		FROM
			tag
		WHERE
			display = #{display}
	</select>

	<insert id="registerTagForTask" parameterType="lumi.vo.TagVO">
		INSERT INTO
			tasktag
		( taskid , tagid )
		VALUES
		( #{taskid} , #{tagid} )
	</insert>

	<!-- タスクからタグを削除する -->
	<delete id="removeTagForTask" parameterType="lumi.vo.TagVO">
		DELETE FROM
			tasktag
		WHERE
			taskid = #{taskid}
		AND
			tagid = #{tagid}
	</delete>

	<!-- 編集可能なタスクであるかを判定する -->
	<select id="isTaskOwner" parameterType="lumi.vo.AccessControlDTO" resultType="int">
		SELECT
			count(id)
		FROM
			task
		WHERE
			id = #{taskid}
		AND
			userid = #{username}
	</select>

	<!-- 有効なタグとその件数を取得する -->
	<select id="tagAllList" parameterType="lumi.vo.AccessControlDTO" resultType="lumi.vo.TagVO">
		SELECT
			tag.tagid tagid,
			display ,
			count(display) mark
		FROM
			task , tag , tasktag
		WHERE
			task.id = tasktag.taskid
		AND
			tag.tagid = tasktag.tagid
		AND
			task.userid = #{username}
		GROUP BY
			display
		ORDER BY
			mark DESC
	</select>

	<!-- Twitter認証連携済みであるかを検索する -->
	<select id="searchTwitterChain" parameterType="lumi.vo.AuthChainDTO" resultType="lumi.vo.AuthChainDTO">
		SELECT
			twit.twitterid	twitterId
			, user.username	username
			, user.password	password
		FROM
			userlist user
			, twitter_chain twit
		WHERE
			twit.username = user.username
		AND
			twit.twitterid = #{twitterId}
	</select>

	<!-- ユーザの表示名のみ更新する -->
	<update id="updateDisplayName" parameterType="lumi.vo.AuthChainDTO">
		UPDATE
			userlist
		SET
			displayName = #{displayName}
		WHERE
			username = #{twitterId}
	</update>

	<!-- Twitter連携テーブルにユーザ情報を登録する -->
	<insert id="registerTwitterChain" parameterType="lumi.vo.AuthChainDTO">
		INSERT INTO
			twitter_chain
		( twitterid , username , last_chain_time )
		VALUES
		( #{twitterId} ,#{username} , now())
	</insert>

	<!-- Twitter連携済みであればユーザIDのみ更新する -->
	<update id="chainingTwitterId" parameterType="lumi.vo.AuthChainDTO">
		UPDATE
			twitter_chain
		SET
			username = #{username}
		WHERE
			twitterid = #{twitterId}
	</update>

	<!-- 登録済みTwitterIdであるかを検索する -->
	<select id="searchAlreadyRegisterTwitterId" parameterType="lumi.vo.AuthChainDTO" resultType="lumi.vo.AuthChainDTO">
		SELECT
			twitterid	twitterId
		FROM
			twitter_chain
		WHERE
			twitterid = #{twitterId}
	</select>

	<!-- 登録済みユーザの表示名をTwitterの表示名に変え、 -->
	<update id="updateUserFromTwitter" parameterType="lumi.vo.UserRegisterVO">
		UPDATE
			userlist
		SET
			displayname = #{displayName}
			, activate = #{activate}
		WHERE
			username = #{username}
	</update>

	<!-- ユーザテーブルから指定したtwitterIdのデータを削除する -->
	<delete id="deleteUsername" parameterType="java.lang.String">
		DELETE FROM
			userlist
		WHERE
			username = #{value}
	</delete>

	<!-- ユーザロールテーブルから指定したtwitterIdのデータを削除する -->
	<delete id="deleteUserrole" parameterType="java.lang.String">
		DELETE FROM
			userrole
		WHERE
			username = #{value}
	</delete>

	<!-- Twitter連携テーブルから指定したtwitterIdのデータを削除する -->
	<delete id="deleteTwitterChain" parameterType="java.lang.String">
		DELETE FROM
			twitter_chain
		WHERE
			username = #{value}
	</delete>

	<!-- クローズ済みのタスクを一括削除する -->
	<delete id="closeDrop" parameterType="java.lang.String">
		DELETE FROM
			task
		WHERE
			userid = #{value}
		AND
			status = 'cl'
	</delete>

	<!-- タスクサマリー検索 -->
	<select id="taskSummary" parameterType="string" resultType="lumi.vo.TaskSummaryVO">
		SELECT
			  username
			, checkdate
			, task
			, closed
		FROM
			task_summary
		WHERE
			username = #{value}
	</select>
</mapper>
